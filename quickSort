	// Time complexity: average nlogn, worst case is n^2.
	// Space complexity: average logn, worst case is n.
public void quickSort(int[] array) {
		if (array == null || array.length <= 1) {
			return;
		}
		quickSort(array, 0, array.length - 1);
	}

	private void quickSort(int[] array, int left, int right) {
		if (left >= right) {
			return;
		}

		Random random = new Random();
		int pivotIndex = left + random.nextInt(right - left + 1);

		swap(array, pivotIndex, right);

		int i = left, j = right - 1;
		while (i <= j) {
			if (array[i] <= array[right]) {
				i++;
			} else {
				swap(array, i, j);
				j--;
			}
		}
		swap(array, right, i);

		quickSort(array, left, j);
		quickSort(array, i + 1, right);
	}

	private void swap(int[] array, int x, int y) {
		int tmp = array[x];
		array[x] = array[y];
		array[y] = tmp;
	}
