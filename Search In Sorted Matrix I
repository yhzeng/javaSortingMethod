//Given a 2D matrix that contains integers only, which each row is sorted in an ascending order. 
//The first element of next row is larger than (or equal to) the last element of previous row.

//Given a target number, returning the position that the target locates within the matrix. 
//If the target number does not exist in the matrix, return {-1, -1}.

// Time: O(log m + log n)
// Space: O(1)
public int[] search(int[][] matrix, int target) {
		// Write your solution here
		if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
			return new int[] { -1, -1 };
		} else {
			int m = matrix.length, n = matrix[0].length;
			int[] res = new int[] { -1, -1 };
			int left = 0, right = m * n - 1;
			while (left <= right) {
				int mid = left + (right - left) / 2;
				if (matrix[mid / n][mid % n] == target) {
					res[0] = mid / n; // row number
					res[1] = mid % n; // column number
					return res;
				} else if (matrix[mid / n][mid % n] < target) {
					left = mid + 1;
				} else {
					right = mid - 1;
				}
			}
			return res;
		}
